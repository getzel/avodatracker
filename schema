//Pseudo code
Users
- ID (AI)
- login
- pass

CREATE TABLE `avodatrack`.`users` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `login` VARCHAR(45) NULL,
  `pass` VARCHAR(45) NULL,
  PRIMARY KEY (`ID`));


Tasks
- ID (AI)
- label
- hide_label (bool)
- descr
- freq (how many entries per schedule)
- schedule (daily/weekly/monthly/yearly/other)
- metric (E[xists]/=/</>)
- bar  (this plus metric should compare with a log to indicate success)
- ceiling  (upper bound for success)
- metric_label
- private_task (user_ID) 

Example Usage
Chitas Daily: schedule = daily, metric = E
Chesbon HaNefesh Monthly: schedule = monthly, metric = E
Sleeping On Time: schedule = daily, metric = <, bar = 1030, metric_label = 'I went to sleep at'
Chavrusa Monday and Thurday: schedule = weekly, freq = 2, metric = E ++ schedule: ['mon','thurs']

Logging streak indicates if there is an entry for each schedule unit (daily/monthly/etc)
Success streak indicates number of uninterrupted logs for which `entry` meets success criteria


CREATE TABLE `avodatrack`.`tasks` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `label` VARCHAR(150) NULL,
  `hide_label` TINYINT NULL,
  `descr` VARCHAR(250) NULL,
  `freq` TINYINT NULL,
  `schedule` VARCHAR(6) NULL,
  `metric` VARCHAR(45) NULL,
  `bar` VARCHAR(45) NULL,
  `ceiling` VARCHAR(45) NULL,
  `metric_label` VARCHAR(45) NULL,
  `private_task` INT NULL,
  PRIMARY KEY (`ID`));

Schedule
Used to validate log entries for a task. 
CREATE TABLE `avodatrack`.`schedule` (
  `ID` INT NOT NULL AUTO_INCREMENT,
   `task_ID` INT NULL,
   `pattern` VARCHAR(250) NULL, -- serialize pattern?
  PRIMARY KEY (`ID`));
  
User/Tasks Relationship table
CREATE TABLE `avodatrack`.`users_tasks` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `user_ID` INT NULL,
  `task_ID` INT NULL,
  `task_start` INT NULL,
  `task_end` INT NULL,
  PRIMARY KEY (`ID`));

Log
- ID (AI)
- task_ID
- user_ID
- success (bool)
- entry (specific logged value)
- log_date (timestamp)

CREATE TABLE `avodatrack`.`task_log` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `task_ID` INT NULL,
  `user_ID` INT NULL,
  `success` TINYINT NULL,
  `entry` VARCHAR(45) NULL,
  `log_date` INT NULL,
  PRIMARY KEY (`ID`));
